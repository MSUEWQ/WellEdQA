source("C:/WellEdDataAnalysis/2025-01-10_1123_CheckData_22-23_nk/2_code/DataFieldChecks_2025-01-09_nk.R", echo=TRUE)
write.csv(na.df, '../3_output/NACounts_lab.csv')
source("C:/WellEdDataAnalysis/2025-01-10_1123_CheckData_22-23_nk/2_code/DataFieldChecks_2025-01-09_nk.R", echo=TRUE)
source("C:/WellEdDataAnalysis/2025-01-10_1123_CheckData_22-23_nk/2_code/PlotAnalytes_2024-12-15_1533_was.R", echo=TRUE)
compile$newhigher <- c()
View(compile)
compile$newhigher <- c('')
compile$newhigher <- 'test'
compile[,newhigher] <- compile$new.max > compile$old.max
compile$newhigher <- compile$new.max > compile$old.max
compile$new.max > compile$old.max
which(comiple$new.max > compile$old.max)
which(compile$new.max > compile$old.max)
compile[,'new.max'] < compile[,'old.max']
compile[,'new.max'] < compile[,'past.max']
compile$newhigher <- compile[,'new.max'] < compile[,'past.max']
compile[,'newhigher'] <- compile[,'new.max'] > compile[,'past.max']
compile[compile$newhigher == 'TRUE','newhigher'] <- 'Higher'
compile[,'newhigher'] <- compile[,'new.max'] > compile[,'past.max']
compile[compile$newhigher == 'TRUE','newhigher'] <- 'Higher'
compile[compile$newhigher == 'FALSE','newhigher'] <- 'Lower'
source("C:/WellEdDataAnalysis/2025-01-10_1123_CheckData_22-23_nk/2_code/PlotAnalytes_2024-12-15_1533_was.R", echo=TRUE)
# Check for duplicate primary tracknums ####
# Aggregate to get unique combinations of tracking number and sampleid
prim <- lab %>% group_by(TrackNum2_primary, SampleID, Analyte) %>% tally()
View(prim)
# Get table of tracking numbers that appear multiple times
dupes <- prim %>% group_by(TrackNum2_primary) %>% tally() %>% filter(n > 1)
# Output table of tracking numbers with duplicates and their assigned sampleids
write.csv(prim %>% filter(TrackNum2_primary %in% dupes$TrackNum2_primary),
'../3_output/TrackNumDupes.csv')
# Output table of tracking numbers with duplicates and their assigned sampleids
write.csv(prim %>% filter(TrackNum2_primary %in% dupes$TrackNum2_primary),
'../3_output/TrackNumDupes.csv')
View(dupes)
# Check for duplicate primary tracknums ####
# Aggregate to get unique combinations of tracking number and sampleid
prim <- lab %>% group_by(TrackNum2_primary, SampleID, Analyte) %>% tally()
# Get table of tracking numbers that appear multiple times
dupes <- prim %>% group_by(TrackNum2_primary) %>% tally() %>% filter(n > 1)
View(dupes)
# Check for duplicate primary tracknums ####
# Aggregate to get unique combinations of tracking number and sampleid
prim <- lab %>% group_by(TrackNum2_primary, SampleID, Analyte) %>% tally()
View(prim)
# Get table of tracking numbers that appear multiple times
dupes <- prim %>% group_by(TrackNum2_primary) %>% tally() %>% filter(n > 1)
# Output table of tracking numbers with duplicates and their assigned sampleids
write.csv(prim %>% filter(n > 1),
'../3_output/TrackNumDupes.csv')
source("C:/WellEdDataAnalysis/2025-01-10_1123_CheckData_22-23_nk/2_code/DataFieldChecks_2025-01-09_nk.R", echo=TRUE)
# Setup ####
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(gridExtra)
# import data and set years ####
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegSheets.csv')
past.years <- c(seq(2015,2021,1))
new.year <- c(2022,2023)
View(lab0)
View(reg0)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
# Setup ####
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(gridExtra)
# import data and set years ####
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegistrationEntry.csv')
past.years <- c(seq(2015,2021,1))
new.year <- c(2022,2023)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
View(reg0)
# Setup ####
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(gridExtra)
# import data and set years ####
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegistrationEntry.csv')
View(reg0)
past.years <- c(seq(2015,2021,1))
new.year <- c(2022,2023)
# Add test year to reg0
reg0$TestYear <- 2024
reg0$YrQuarter[0]
reg0$YrQuarter[2]
strsplit(reg0$YrQuarter[2], 1,3)
substr(reg0$YrQuarter[2], 1, 3)
substr(reg0$YrQuarter[2], 1, 2)
substr(reg0$YrQuarter[2], 3, 4)
as.numeric(substr(reg0$YrQuarter[2], 1, 2))
as.numeric(substr(reg0$YrQuarter[2], 1, 2)) + 2000
# Add test year and test quarter to reg0
reg0$TestYear <- as.numeric(substr(reg0$YrQuarter, 1, 2)) + 2000
reg0$TestQr <- substr(reg0$YrQuarter, 3, 4)
"TrackNum2_primary" %in% colnames(reg0)
"TestYear" %in% colnames(reg0)
"County" %in% colnames(reg0)
"share_County" %in% colnames(reg0)
"Share_County" %in% colnames(reg0)
reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
lab <- merge(lab0,reg2lab, by = "TrackNum2_primary")
View(reg2lab)
View(lab)
# Data Processing ####
lab[lab$TResult == "ND", 'NResult'] <- 0
# Quick data checks ####
unique(reg0$NotAWell) # check only 2 result options
unique(reg0$Share_County) # check no lowercase
unique(sort(reg0$TestYear)) # check for zeros or other weird values
unique(sort(reg0$YrQuarter)) # check for zeros or other weird values
# filter only well data
WellTrackNums <- reg0[reg0$NotAWell == "", "TrackNum2_primary"]
lab.well <- lab[lab$TrackNum2_primary %in% WellTrackNums,]
# Data select and filter problematic parameters ####
input.data <- lab
parameter.list <- unique(input.data$Analyte)
parameter.list <- parameter.list[!(parameter.list %in%
c("Coliform, Total", "Coliform, E-Coli",
"Corrosivity (Langelier Index)",
"Radon 222 precision (\xb1)",
"Bacteria, Iron Related"))]
# create blank dataframe for parameter stats ####
headings <- c("parameter", "past.n","new.n",
"past.min", "new.min",
"past.median", "new.median",
"past.max", "new.max")
heading.count <- length(headings)
compile <- data.frame(matrix(ncol = heading.count, nrow = 0))
colnames(compile) <- headings
# loop to plot analytes ####
# i = 23
text.size <- 1.4
for(i in 1:length(parameter.list))
for(i in 1:length(parameter.list)){
parameter.data <- input.data[input.data$Analyte == parameter.list[i],]
range.i <- range(parameter.data$NResult, na.rm = TRUE)
# windows(1200,600)
png(1200,600, filename = paste0('../3_output/Boxplots/', parameter.list[i],'.png'))
layout(matrix(c(1,2), nrow = 1, byrow = TRUE))
# layout.show(2)
# plot old data
boxplot(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'],
ylim = range.i,
main = paste0(parameter.list[i], " (", range(past.years)[1], "-",
range(past.years)[2], ")"))
past.n <- length(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
past.max <- max(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
past.median <- median(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
past.min <- min(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
mtext(side = 1, line = 0, cex = text.size, paste0('n = ', past.n))
mtext(side = 1, line = 1, cex = text.size, paste0('max = ', past.max))
mtext(side = 1, line = 2, cex = text.size, paste0('median = ', past.median))
mtext(side = 1, line = 3, cex = text.size, paste0('min = ', past.min))
# plot new data
boxplot(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'],
ylim = range.i,
main = paste0(parameter.list[i]," (" , new.year, ")"))
new.n <- length(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.max <- max(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.median <- median(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.min <- min(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
mtext(side = 1, line = 0, cex = text.size, paste0('n = ', new.n))
mtext(side = 1, line = 1, cex = text.size, paste0('max = ', new.max))
mtext(side = 1, line = 2, cex = text.size, paste0('median = ', new.median))
mtext(side = 1, line = 3, cex = text.size, paste0('min = ', new.min))
dev.off()
# add parameter stats to compile dataframe
compile[i,'parameter'] <- parameter.list[i]
compile[i, 'past.n'] <- past.n
compile[i, 'past.min'] <- past.min
compile[i, 'past.median'] <- past.median
compile[i, 'past.max'] <- past.max
compile[i, 'new.n'] <- new.n
compile[i, 'new.min'] <- new.min
compile[i, 'new.median'] <- new.median
compile[i, 'new.max'] <- new.max
# print(i)
}
past.years <- c(seq(2015,2023,1))
new.year <- c(2024)
# Add test year and test quarter to reg0
reg0$TestYear <- as.numeric(substr(reg0$YrQuarter, 1, 2)) + 2000
reg0$TestQr <- substr(reg0$YrQuarter, 3, 4)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
lab <- merge(lab0,reg2lab, by = "TrackNum2_primary")
# Data Processing ####
lab[lab$TResult == "ND", 'NResult'] <- 0
# Quick data checks ####
unique(reg0$NotAWell) # check only 2 result options
unique(reg0$Share_County) # check no lowercase
unique(sort(reg0$TestYear)) # check for zeros or other weird values
unique(sort(reg0$YrQuarter)) # check for zeros or other weird values
# filter only well data
WellTrackNums <- reg0[reg0$NotAWell == "", "TrackNum2_primary"]
lab.well <- lab[lab$TrackNum2_primary %in% WellTrackNums,]
## data subsets by county etc.
# gallatin.well <- lab.well[lab.well$County == "Gallatin",]
# gallatin.all <- lab[lab$County == "Gallatin",]
# gallatin.share.all <- lab[lab$County == "Gallatin" & lab$Share_County == "Yes",]
# gallatin.share.well <- gallatin.share.all[gallatin.share.all$TrackNum2_primary
# %in% WellTrackNums,]
# length(gallatin.share.all[,1])
# length(gallatin.share.well[,1])
# Data select and filter problematic parameters ####
input.data <- lab
# input.data <- lab.well
parameter.list <- unique(input.data$Analyte)
parameter.list <- parameter.list[!(parameter.list %in%
c("Coliform, Total", "Coliform, E-Coli",
"Corrosivity (Langelier Index)",
"Radon 222 precision (\xb1)",
"Bacteria, Iron Related"))]
# create blank dataframe for parameter stats ####
headings <- c("parameter", "past.n","new.n",
"past.min", "new.min",
"past.median", "new.median",
"past.max", "new.max")
heading.count <- length(headings)
compile <- data.frame(matrix(ncol = heading.count, nrow = 0))
colnames(compile) <- headings
# loop to plot analytes ####
# i = 23
text.size <- 1.4
for(i in 1:length(parameter.list)){
parameter.data <- input.data[input.data$Analyte == parameter.list[i],]
range.i <- range(parameter.data$NResult, na.rm = TRUE)
# windows(1200,600)
png(1200,600, filename = paste0('../3_output/Boxplots/', parameter.list[i],'.png'))
layout(matrix(c(1,2), nrow = 1, byrow = TRUE))
# layout.show(2)
# plot old data
# boxplot(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'],
#         ylim = range.i,
#         main = paste0(parameter.list[i], " (", range(past.years)[1], "-",
#                      range(past.years)[2], ")"))
# past.n <- length(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
# past.max <- max(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
# past.median <- median(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
# past.min <- min(parameter.data[parameter.data$TestYear %in% past.years, 'NResult'])
#
# mtext(side = 1, line = 0, cex = text.size, paste0('n = ', past.n))
# mtext(side = 1, line = 1, cex = text.size, paste0('max = ', past.max))
# mtext(side = 1, line = 2, cex = text.size, paste0('median = ', past.median))
# mtext(side = 1, line = 3, cex = text.size, paste0('min = ', past.min))
# plot new data
boxplot(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'],
ylim = range.i,
main = paste0(parameter.list[i]," (" , new.year, ")"))
new.n <- length(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.max <- max(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.median <- median(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
new.min <- min(parameter.data[parameter.data$TestYear %in% new.year, 'NResult'])
mtext(side = 1, line = 0, cex = text.size, paste0('n = ', new.n))
mtext(side = 1, line = 1, cex = text.size, paste0('max = ', new.max))
mtext(side = 1, line = 2, cex = text.size, paste0('median = ', new.median))
mtext(side = 1, line = 3, cex = text.size, paste0('min = ', new.min))
dev.off()
# add parameter stats to compile dataframe
compile[i,'parameter'] <- parameter.list[i]
compile[i, 'past.n'] <- past.n
compile[i, 'past.min'] <- past.min
compile[i, 'past.median'] <- past.median
compile[i, 'past.max'] <- past.max
compile[i, 'new.n'] <- new.n
compile[i, 'new.min'] <- new.min
compile[i, 'new.median'] <- new.median
compile[i, 'new.max'] <- new.max
# print(i)
}
# parameter.list[46]
# export parameter stats as csv ####
compile <- compile[compile$new.n >0, ]
compile <- compile[with(compile,order(parameter)),] # sort alphabetical
#compile$newhigher <- 'test'
compile[,'newhigher'] <- compile[,'new.max'] > compile[,'past.max']
compile[compile$newhigher == 'TRUE','newhigher'] <- 'Higher'
compile[compile$newhigher == 'FALSE','newhigher'] <- 'Lower'
write.csv(x = compile, file = '../3_output/StatsByAnalyte.csv')
# Setup -------------------------------------------------------------------
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(tidyverse)
library(dplyr)
# import data
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegistrationEntry.csv')
View(lab0)
# Set quarters and years --------------------------------------------------
lab0$Year <- as.numeric(substr(lab0$YrQuarter, 1, 2)) + 2000
lab0$Quarter <- substr(lab0$YrQuarter, 3, stop = 4)
reg0$TestYear <- as.numeric(substr(reg0$YrQuarter, 1, 2)) + 2000
reg0$TestQr <- substr(reg0$YrQuarter, 3, 4)
# Write 0 for result if not detected -----------------------------------------------
lab0[lab0$TResult == "ND", "NResult"] <- 0
View(reg0)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
lab <- merge(lab0,reg2lab, by = "TrackNum2_primary")
View(reg2lab)
View(lab)
# Write 0 for result if not detected -----------------------------------------------
lab[lab$TResult == "ND", "NResult"] <- 0
lab_grouped <- lab %>% group_by(Quarter, Year, Analyte)
View(lab_grouped)
df <- lab_grouped %>% summarise(NResult)
View(df)
lab_grouped <- lab %>% group_by(County, Quarter, Year, Analyte)
df <- lab_grouped %>% summarise(NResult)
ggplot(diamonds , aes(x = cut, y = depth, fill = color)) +
geom_boxplot() +
coord_flip()
diamonds
ggplot(lab , aes(x = NResult, y = County, fill = Quarter)) +
geom_boxplot() +
coord_flip()
analyte <- "Chloride"
df <- lab[lab$Analyte == analyte]
df <- lab[lab$Analyte == analyte,]
View(df)
ggplot(df , aes(x = NResult, y = County, fill = Quarter)) +
geom_boxplot() +
coord_flip() +
ggtitle(analyte)
ggplot(diamonds , aes(x = cut, y = depth, fill = color)) +
geom_boxplot() +
coord_flip()
ggplot(df , aes(x = County, y = NResult, fill = Quarter)) +
geom_boxplot() +
coord_flip() +
ggtitle(analyte)
for (analyte in unique(df$Analyte)){
png(paste0("../3_output/Boxplots/StackedBoxplots/", analyte, ".png"))
analyte_df <- lab[lab$Analyte == analyte,]
p <- ggplot(analyte_df , aes(x = County, y = NResult, fill = Quarter)) +
geom_boxplot() +
coord_flip() +
ggtitle(analyte)
print(p)
dev.off()
}
for (analyte in unique(lab$Analyte)){
png(paste0("../3_output/Boxplots/StackedBoxplots/", analyte, ".png"))
analyte_df <- lab[lab$Analyte == analyte,]
p <- ggplot(analyte_df , aes(x = County, y = NResult, fill = Quarter)) +
geom_boxplot() +
coord_flip() +
ggtitle(analyte)
print(p)
dev.off()
}
analyte_df <- lab[lab$Analyte == analyte,]
View(analyte_df)
unit <- analyte_df$Runits[1]
for (analyte in unique(lab$Analyte)){
png(paste0("../3_output/Boxplots/StackedBoxplots/", analyte, ".png"))
analyte_df <- lab[lab$Analyte == analyte,]
unit <- analyte_df$Runits[1]
p <- ggplot(analyte_df , aes(x = County, y = NResult, fill = Quarter)) +
geom_boxplot() +
coord_flip() +
ggtitle(paste(analyte, unit))
print(p)
dev.off()
}
for (analyte in unique(lab$Analyte)){
png(paste0("../3_output/Boxplots/StackedBoxplots/", analyte, ".png"))
analyte_df <- lab[lab$Analyte == analyte,]
unit <- analyte_df$Runits[1]
p <- ggplot(analyte_df , aes(x = County, y = NResult)) +
geom_boxplot() +
coord_flip() +
ggtitle(paste(analyte, unit))
print(p)
dev.off()
}
# Setup -------------------------------------------------------------------
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(gridExtra)
# import data
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegistrationEntry.csv')
# Compile and format data -------------------------------------------------
# Add test year and test quarter to reg0
reg0$TestYear <- as.numeric(substr(reg0$YrQuarter, 1, 2)) + 2000
reg0$TestQr <- substr(reg0$YrQuarter, 3, 4)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
lab <- merge(lab0,reg2lab, by = "TrackNum2_primary")
# Write 0 for non-detects
lab[lab$TResult == "ND", 'NResult'] <- 0
View(lab)
View(reg0)
View(reg2lab)
# Look for duplicate tracking numbers
dupe_tracking <- group_by(reg0) %>% summarize(
n = n()
)
# Setup -------------------------------------------------------------------
cat("\014") # clear console
rm(list=ls()); # remove all objects from workspace
library(ggplot2)
library(gridExtra)
library(dplyr)
# import data
lab0 <- read.csv('../1_input/2024LabResults.csv')
reg0 <- read.csv('../1_input/2024RegistrationEntry.csv')
# Compile and format data -------------------------------------------------
# Add test year and test quarter to reg0
reg0$TestYear <- as.numeric(substr(reg0$YrQuarter, 1, 2)) + 2000
reg0$TestQr <- substr(reg0$YrQuarter, 3, 4)
# add reg fields to lab data
reg2lab <- reg0[,c("TrackNum2_primary", "TestYear", "County", "Share_County")]
lab <- merge(lab0,reg2lab, by = "TrackNum2_primary")
# Write 0 for non-detects
lab[lab$TResult == "ND", 'NResult'] <- 0
# Basic QA Checks ---------------------------------------------------------
# Look for duplicate tracking numbers
dupe_tracking <- group_by(reg0) %>% summarize(
n = n()
)
View(dupe_tracking)
by_vs_am %>% summarise(n = n())
by_vs_am <- mtcars %>% group_by(vs, am)
by_vs <- by_vs_am %>% summarise(n = n())
View(by_vs)
View(by_vs_am)
# Look for duplicate tracking numbers
dupe_tracking <- group_by(reg0) %>% summarize(
n = sum(n)
)
length(unique(reg0$TrackNum2_primary)
)
n_occur <- data.frame(table(reg0$TrackNum2_primary))
View(n_occur)
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],])
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1], c("NameLast", "NameFirst", "TrackingNum2_primary")])
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],])[c("NameLast", "NameFirst", "TrackingNum2_primary")]
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],])["NameLast", "NameFirst", "TrackingNum2_primary"]
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],])
reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>% select(c("NameLast", "NameFirst", "TrackingNum2_primary"))
reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>% select(c("NameLast", "NameFirst", "TrackNum2_primary"))
n_occur <- data.frame(table(reg0$TrackNum2_primary))
print("Duplicate Tracking Number Info:")
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>% select(c("NameLast", "NameFirst", "TrackNum2_primary")))
# If there are duplicates, print the participants' names and tracking numbers
if (length(unique(reg0$TrackNum2_primary)) != nrow(reg0)) {
n_occur <- data.frame(table(reg0$TrackNum2_primary))
print("Duplicate Tracking Number Info:")
print(reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>%
select(c("NameLast", "NameFirst", "TrackNum2_primary")))
# If no duplicates, print "No duplicates"
} else if (length(unique(reg0$TrackNum2_primary)) == nrow(reg0)){
print("No duplicate primary tracking numbers")
}
duplicates <- reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>%
select(c("NameLast", "NameFirst", "TrackNum2_primary"))
View(duplicates)
cars
for (row in cars){}
for (row in cars){print(row)}
for (row in nrow(cars)){print(row)}
cars[1.]
cars[1,]
cars[19,]
print(cars)
n_occur <- data.frame(table(reg0$TrackNum2_primary))
duplicates <- reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>%
select(c("NameLast", "NameFirst", "TrackNum2_primary"))
print("Duplicate Primary Tracking Numbers:")
print(duplicates)
# If there are duplicates, print the participants' names and tracking numbers
if (length(unique(reg0$TrackNum2_primary)) != nrow(reg0)) {
n_occur <- data.frame(table(reg0$TrackNum2_primary))
duplicates <- reg0[reg0$TrackNum2_primary %in% n_occur$Var1[n_occur$Freq > 1],] %>%
select(c("NameLast", "NameFirst", "TrackNum2_primary"))
print("Duplicate Primary Tracking Numbers:")
print(duplicates)
# If no duplicates, print "No duplicates"
} else if (length(unique(reg0$TrackNum2_primary)) == nrow(reg0)){
print("No duplicate primary tracking numbers")
}
# Make sure all reg sheets have unique lab results and vice versa
unique(reg0$TrackNum2_primary)
View(lab)
View(lab0)
View(lab)
unique(lab$TrackNum2_primary)
# Make sure all reg sheets have unique lab results and vice versa
unique(reg0$TrackNum2_primary) %in% unique(lab$TrackNum2_primary)
unique(reg0$TrackNum2_primary)[is_unique]
is_unique <- unique(reg0$TrackNum2_primary) %in% unique(lab$TrackNum2_primary)
unique(reg0$TrackNum2_primary)[is_unique]
unique(reg0$TrackNum2_primary)[!is_unique]
!is_unique
print("hi", "u")
length(not_unique)
not_unique <- unique(reg0$TrackNum2_primary)[!is_unique]
length(not_unique)
